generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Hotel {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  city           String
  price          Int
  rating         Int
  image          String?
  description    String?
  checkInTime    String
  checkOutTime   String
  maxGuests      Int
  amenities      String[]
  availableRooms Int

  rooms        Room[]
  availability HotelAvailability[]
  reservations Reservation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([city, price, rating])
  @@map("hotels") // Koleksiyon adÄ±
}

model Room {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  hotelId      String        @db.ObjectId
  hotel        Hotel         @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  name         String
  capacity     Int
  price        Int
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([hotelId])
  @@map("rooms")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String
  passwordHash String?
  phone        String?
  role         UserRole      @default(CUSTOMER)
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([email])
  @@map("users")
}

model Reservation {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  hotelId    String            @db.ObjectId
  hotel      Hotel             @relation(fields: [hotelId], references: [id])
  roomId     String?           @db.ObjectId
  room       Room?             @relation(fields: [roomId], references: [id])
  userId     String?           @db.ObjectId
  user       User?             @relation(fields: [userId], references: [id])
  checkIn    DateTime
  checkOut   DateTime
  guests     Int
  totalPrice Int
  status     ReservationStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@index([hotelId, roomId, userId, checkIn, checkOut])
  @@map("reservations")
}

model HotelAvailability {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  hotelId   String   @db.ObjectId
  hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  startDate DateTime
  endDate   DateTime

  @@index([hotelId, startDate, endDate])
  @@map("hotel_availability")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
